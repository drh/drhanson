.ds Y \s-2Y\s0
.ds S \fI\s-2EZ\s0\fP
.ds Un \s-2UNIX\s0
.ds t 	
.de SS
.ps \\$1
.nr PS \\$1
.vs \\$2p
.nr VS \\$2
..
.de DL
.DS \\$1 3n
.ft I
.ta 3n 6n 9n 12n 15n
..
.de PS
.LD
.ta 3n 6n 9n 12n 15n 18n 21n 24n 27n 30n 33n 36n 39n 42n
.SS 9 10
..
.de PE
.SS 10 12
.ft R
.ss 4
.tr --
.DE
..
.TR 81-13a
.GR MCS-7802545
.DA "August 1981, revised April 1983"
.TL
The \*S Programming and Command Language
.AU
Christopher W. Fraser
David R. Hanson
.AB
\*S is an interactive,
structured, general-purpose programming
language that is semantically between
high-level string processing languages like SNOBOL4
and low-level Algol-like languages like Pascal.
It is similar in spirit to SNOBOL4 and Icon
and has many of their attributes, such as
runtime flexibility,
untyped variables, and heterogeneous structures.
\*S lacks SNOBOL4-style
pattern matching, but does have Icon-style
lexical operations.
Syntactically, \*S is similar to C and \*Y.
This report is a reference manual for \*S,
and includes programming examples.
.AE
.if t .2C
.NH
Introduction
.PP
SNOBOL4 is perhaps the most widely known and used string
processing language.
There are older, less widely used, string processing
languages ,[.hanson string processing languages.]
and several newer languages,
such as Icon ,[.iconref.]
POPLAR ,[.poplar.]
and AWK .[.kernighan awk.]
The hallmark of such languages
is their treatment of string data.
Most provide strings as an atomic
or scalar type and have an extensive repertoire of
high-level string processing operations,
which usually includes
some form of pattern matching.
.PP
Traditional `Algol-like' languages, on the other hand,
do not offer string processing facilities comparable to those of SNOBOL4.
For those that do have some string processing capabilities,
the facilities are low-level and emphasize
manipulation at the character rather than the string level.
PL/I provides operations on strings whose length is fixed or varies
only to a fixed maximum.
C [.clanguage.] provides similar, but less comprehensive,
facilities for arrays of characters.
Most other traditional languages, such as Pascal, provide
only fixed-length strings as arrays of characters.
.PP
\*S is an interactive,
structured, general-purpose programming
language that is intended to fill the void between
high-level string processing languages like SNOBOL4
and low-level Algol-like languages like C and
to serve as a command language, such as the
.UX
shell .[.bourne shell.]
\*S treats strings as scalar types as in SNOBOL4
and provides numerous `mid-level' string operations
similar to those in Icon.
.PP
Compared to SNOBOL4 and Icon,
\*S is relatively simple.
While it shares many of the basic attributes of those languages,
such as concise, expressive constructs, runtime flexibility,
untyped variables, heterogeneous structures,
and automatic type conversion,
it does not include pattern matching or any form
of goal-directed evaluation as in Icon.
In addition to the usual scalar data including
strings, \*S has procedures and
tables in the style of AWK,
which amounts to treating SNOBOL4 arrays and tables
as a single type.
.PP
Syntactically, \*S is similar to \*Y [.yref.] with a few
additional control constructs.
\*S programs are sequences of statements and
procedure declarations.
Statements outside procedures are executed immediately, and
procedure declarations assign procedures to identifiers.
Identifiers are either global or local.
Statements include the
usual structured control flow constructs and expressions.
.PP
The remainder of this paper describes the syntax and semantics
of \*S and illustrates its use.
.NH 2
Syntax Notation
.PP
The syntax of \*S is described informally
using English prose and formally using
a metalanguage in which
syntactic classes are denoted by \fIitalic\fP type
and literal characters and symbols are denoted by \fBbold\fP type.
Alternatives are separated by vertical bars ( \(br ) or are
listed on separate lines.
Optional items are enclosed in
brackets ( [ ] ), and
ellipses (...) indicate indefinite
repetition of the item they immediately follow.
In cases where the literal use of the metasymbols
is not clear in context or conflicts with their
metalinguistic use, they are enclosed in quotes.
.NH
Lexical Structure
.PP
\*S programs are composed of identifiers, reserved words,
constants, operators, and other separators.
The `official' character set of \*S is \s-2ASCII\s0.
Blanks and tabs are ignored but
are required to separate some lexical elements
such as identifiers and reserved words.
.NH 2
Reserved Words
.PP
Reserved words introduce language constructs and may
not be used for other purposes (e.g. as variable names).
Reserved words must be given in lower-case.
The reserved words are
.DS B
.ft B
.ta 15n 30n 45n
break	if	procedure
else	in	return
end	include	while
for	next
.DE
.NH 2
Identifiers
.PP
An identifier is a sequence of letters, digits, or underscores
that begins with a letter.
Corresponding
upper- and lower-case letters are treated as different.
Identifiers may be of any length.
.NH 2
Literals
.PP
Integer literals are specified by sequences of digits
in the usual manner.
.PP
Real literals are specified in the standard fashion,
but exponential notation (e.g. 3.45e10) is not supported.
For magnitudes less than 1, a leading 0 is required.
.PP
String literals are specified by delimiting the
sequence of characters by double quotes (").
Some characters, such as the double quote,
cannot be entered directly because of their special function.
The following escape convention may be used
to enter these kinds of characters.
.DS B
.ta 15n 30n
\fIcharacter	code

\fRnewline	\en
\fRdouble quote	\e"
\fRbackslash	\e\e
\fRtab	\et
\fRany character	\e\fIddd\fP
.DE
The specification \e\fIddd\fP represents the character with
\s-2ASCII\s0 code octal \fIddd\fP;
only enough digits to specify the code need be given.
.NH 2
Comments
.PP
The sharp character (#) causes
the rest of the line on which it appears to be
ignored and therefore serves to introduce comments.
.NH
Types
.PP
\*S supports four kinds of data, called \fItypes\fP:
.DS B
.ft B
.ta 15n
numeric
string
table
procedure
.DE
Numerics (integers and reals)
serve their conventional purposes.
Strings are sequences of characters.
Tables are heterogeneous one-dimensional
arrays that can be indexed by arbitrary values much like SNOBOL4 tables.
Procedures serve their conventional purpose, but are data objects.
Procedures by a procedure declaration (Section 4), and
tables are created by subscripting a variable (Section 5.1).
Files are treated as strings.
.PP
The type of a variable varies during execution and is
the type of the value assigned to it.
Values are converted to the appropriate types automatically
as necessary for most operations.
For arithmetic operations,
both operands are converted to numeric types if possible.
Only strings that conform to the
syntax described in Section 2.3 for numeric constants
can be converted to numeric.
Integer arithmetic is performed if both of the resulting
operands are integers.
Otherwise, the operands are
converted to real, if necessary, and real arithmetic is performed.
.PP
Conversion from integer to real corresponds
to a `float' operation;
conversion from real to integer corresponds
to a `fix' operation.
Specifically, the real value is truncated to its integral part.
.PP
For string operations,
operands are converted to string if possible.
Only integer and real values can be converted to string.
.PP
The specific action of
some operations depends on the types of the operands.
In comparisons, for example, lexical comparison is performed
if both operands are strings, otherwise
arithmetic comparison is performed.
.PP
Failure of any automatic conversion results in a runtime error.
.NH
Program Structure
.PP
A \*S program consists of one or more statements or procedures.
.DL B
.ps -1
program:
	\fR[\fP statement \(br \fBinclude\fP string-literal \(br \c
procedure-decl \fR]...\fP
.ps
.DE
A statement outside of a procedure is
executed immediately after compilation
and the resulting value,
if it exists, is printed.
Procedure declarations are also executed immediately and result in the
assignment of the procedure to the procedure name.
The \fBinclude\fP specification causes the file whose name is given
by the string literal to be read.
Reading of the current file is temporarily
suspended and the included
file is read by the compiler.
At end of file for the included file,
reading from the previous file is resumed.
\fBinclude\fPs may be nested 10 deep subject to operating
system limitations.
.PP
Variables and procedures that are
unknown outside the procedure are assumed to be local to the containing
procedure.
Formal parameters of a procedure are local to their procedure.
.PP
Procedures are declared as follows.
.DL B
.ps -1
procedure-decl:
	\fBprocedure\fP identifier \c
\fR(\fP \fR[\fP identifier \fR[\fP , identifier \fR]\fP... \fR]\fP \fR)\fP
		\fR[\fP statement \(br procedure-decl \fR]\fP...
		\fBend\fP
.ps
.DE
.PP
Procedures are recursive.
Procedures communicate via arguments or global variables.
Arguments are transmitted by value.
.PP
Most language constructs, such as
declarations, statements, and expressions,
are terminated by the end of the line on which
they appear much as in Ratfor, \*Y, and Icon.
Within a construct, however, newlines
may be used as desired to improve
readability where it is clear that the construct is
continued on the next line.
.NH
Expressions
.PP
Expressions compute values.
Expression evaluation proceeds according to
the precedence and associativity of the operators
involved.
Evaluation is left-to-right.
Operator precedence and associativity is summarized in
the following table in order of increasing precedence.
.DS B
.ps -2
.ta 1.5i
\fIoperators	associativity\fP

=	\fIright-to-left
\|\(br	\fIleft-to-right\fP
&	\fIleft-to-right\fP
== ~= < <= >= >	\fIleft-to-right\fP
\(br\(br	\fIleft-to-right\fP
\(pl \(mi	\fIleft-to-right\fP
\(** / %	\fIleft-to-right
\(mi	\fIunary
.ps
.DE
Parentheses may be used as usual to override the built-in
precedence and associativity rules.
.NH 2
Variables
.PP
The most basic expression refers to a variable\*(emeither
a scalar, a table element, or a substring:
.DL I
variable:
	identifier
	identifier \fR`['\fP expression \fR`]'\fP
	identifier \fR`['\fP expression \fR:\fP expression \fR`]'\fP
.DE
Tables are created automatically upon assignment to
a subscripted variable.
For example, after executing the statements
.DS
.ft M
a = 4
a[6] = 45
.DE
\fIa\fP is a table with one entry.
Referencing a non-existent table entry does not create the entry.
.PP
A substring is a sequence of characters within a string, and it
can be changed to an arbitrary string by assignment.
Substrings are specified by character positions.
Character positions within a string are numbered
from the left starting at 1.
The numbering refers to positions between characters.
For example, the positions in the string \fBHAT\fR are
.DS
.ta 0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC
\fB\*t\*tH\*t\*tA\*t\*tT\fP
\*t\(ua\*t\*t\(ua\*t\*t\(ua\*t\*t\(ua
.ps 6
.ft R
\*t1\*t\*t2\*t\*t3\*t\*t4
.ps
.DE
Note that the position after the last character may be specified.
.PP
Positions may also be specified relative to the right end of
a string starting at 0 and continuing
with negative values toward the left:
.DS
.ta 0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC +0.1iC
\fB\*t\*tH\*t\*tA\*t\*tT\fP
\*t\(ua\*t\*t\(ua\*t\*t\(ua\*t\*t\(ua
.ps 6
.ft R
\*t-3\*t\*t-2\*t\*t-1\*t\*t0
.ps
.DE
For this string, positions 4 and 0 are equivalent, positions
3 and \(mi1 are equivalent, etc.
The valid positions for a string \fIs\fR
are in the range \^\fI\(misize(s)\fR to \fIsize(s) +\fR 1, inclusive.
The substring operation does not return a value if
the positions are outside of this range.
In general, the positive
position \fIi\fR is equivalent to the nonpositive position
\fIi\ \(mi\ (size(s)\ +\ \fR1\fI)\fR.
.NH 2
Primary Expressions
.PP
The primary expressions are:
.DL I
primary-expression:
	integer-literal
	real-literal
	string-literal
	variable
	identifier \fR(\fP \fR[\fP expression \fR[\fP , \c
expression \fR]\fP... \fR]\fP \fR)\fP
	\fR(\fP expression \fR)\fP
.DE
For all procedure arguments,
\fIcopies\fP of the actual argument
values are passed to the procedure.
Thus, argument transmission is by \fIvalue\fP.
The actual value of a table is a pointer to that table.
Thus, when a table is passed as an argument,
transmission by value has the effect of transmission by reference.
.NH 2
String Operators
.LP
.DL I
string-expression:
	expression \(br\(br expression
.DE
The concatenation operator creates a new string by appending
the second string to the first string.
Automatic conversion of both operands to string is provided.
Note that the empty string is the identity with respect to concatenation.
Thus, the result of concatenating the empty string with any string \fIs\fP
is simply \fIs\fP.
.NH 2
Numeric Operators
.LP
.DL I
numeric-expression:
	\(mi expression
	expression \(** expression
	expression / expression
	expression % expression
	expression \(mi expression
	expression \(pl expression
.DE
The unary \(mi operator denotes negation.
Negation has its usual arithmetic meaning.
.PP
The binary \(** and / operators denote multiplication and division,
respectively.
In integer division, the result is truncated.
Division by 0 results in an error.
The binary % operator denotes the residue operation.
The result is an integer and
is the remainder of the first expression divided by the second.
The operands of % must be integer; the appropriate
conversions are performed automatically if necessary.
.PP
The binary \(mi and \(pl operators denote subtraction and addition,
respectively, and have their usual arithmetic meaning.
.NH 2
Relational Operators
.LP
.DL I
relational-expression:
	expression < expression
	expression <= expression
	expression == expression
	expression ~= expression
	expression >= expression
	expression > expression
.DE
The relational operators are
< (less than),
<= (less than or equal),
== (equal to),
~= (not equal to),
>= (greater than or equal to), and
> (greater than).
They all return the value of the right operand if the relation is true.
If the relation is false,
no value is returned.
If both operands are string, string comparison is performed.
Otherwise, both operands are converted to numeric and numeric comparison
is performed.
Integer comparison is performed if both of the resulting
operands are integers.
Otherwise, the operands are
converted to real, if necessary, and real comparison is performed.
.NH 2
Logical Operators
.LP
.DL I
logical-expression:
	expression \fR`\^\(br'\fP expression
	expression & expression
.DE
The binary \^\(br and & operators denote inclusive \s-2OR\s0 and \s-2AND\s0,
respectively.
The \^\(br and & operators are used only in a context that does
not require a value, such as in the conditional expression in
an if, while, or for statement.
In expressions involving
\^\(br and & operators, only enough of the expression to determine
the ultimate truth value is evaluated.
For example,
in
.DS
.ft R
if (f(x) \^\(br g(x)) x = 0
.DE
\fIg\fP is not invoked if \fIf\fP returns a value.
.NH 2
Assignment Operator
.LP
.DL I
assignment-expression:
	variable = expression
.DE
The binary = operator denotes assignment.
The value of the expression is stored in the location denoted
by the variable.
After assignment,
the type of the variable is the type of the expression.
The value of the expression is the result of
the = operator.
If the \fIexpression\fP has no value,
no assignment is made.
For example, in
.DS
.ft R
max = max < a
.DE
no assignment is made to \fImax\fP if \fImax\fP is not less than \fIa\fP.
.PP
The = operator associates to the right, permitting multiple assignments,
e.g.,
.DS
.ft R
a = b = c = 6
.DE
associates as in
.DS
.ft R
a = (b = (c = 6))
.DE
Evaluation of assignments is left-to-right.
Thus, in
.DS
.ft R
a[i] = f(x,y)
.DE
the value of \fIi\fP \fIbefore\fP the invocation of \fIf\fP
is used to index into \fIa\fP.
.NH 2
Built-in Functions and Values
.PP
\*S provides ?? built-in functions and ? built-in values.
Built-in functions and values are the initial values of the
global variables given by the function and value names.
The values of these global variables may be changed.
Different functions expect arguments of different types.
Automatic conversion is performed to convert arguments to the
required types.
Failure of automatic conversion results in an error.
Optional arguments to the built-in functions are enclosed in brackets
in the following descriptions.
.NH 3
String Functions and Values
.PP
The initial values of \fIascii\fP, \fIlcase\fP and \fIucase\fP
are the \s-2ASCII\s0 character set, lower case letters and upper
case letters, respectively.
.IP "\fIfind(\fIs1, s2 \fR[\fI, i, \fR[\fI, j \fR]]\fI)\fR"
.br
\fIfind\fP
returns the leftmost position in
\fIs2\fP where
\fIs1\fP occurs as a substring in
\fIs2\fR[\fIi\fR:\fIj\fR].
If \fIs1\fP is not a substring of
\fIs2\fR[\fIi\fR:\fIj\fR], no value is returned.
\fIi\fP and \fIj\fP are optional and, if omitted,
default to 1 and 0, respectively.
.IP "\fImany(\fIc, s \fR[\fI, i, \fR[\fI, j \fR]]\fI)\fR"
.br
\fImany\fP
returns the position in
\fIs\fP after the longest initial substring of
\fIs\fR[\fIi\fR:\fIj\fR] consisting solely of characters contained in
\fIc\fP.
If the first character of
\fIs\fR[\fIi\fR:\fIj\fR] is not contained in
\fIc\fP, no value is returned.
\fIi\fP and \fIj\fP are optional and, if omitted,
default to 1 and 0, respectively.
.IP "\fImap(\fIs1, s2, s3\fI)\fR"
.br
\fImap\fP
returns a string resulting from a character mapping on
\fIs1\fP, where each character of
\fIs1\fP that is contained in
\fIs2\fP is replaced by the character in the corresponding position in
\fIs3\fP.
Characters of \fIs1\fP that do not appear in \fIs2\fP are left unchanged.
If the same character appears more than once in \fIs2\fP,
the rightmost correspondence with \fIs3\fP applies.
If the sizes of \fIs2\fP and \fIs3\fP are not the same,
an error occurs.
.IP "\fImatch(\fIs1, s2 \fR[\fI, i, \fR[\fI, j \fR]]\fI)\fR"
.br
\fImatch\fP
returns the position in \fIs2\fP after the occurrence of \fIs1\fP
as an initial substring of
\fIs2\fR[\fIi\fR:\fIj\fR].
If \fIs1\fP is not an initial substring of
\fIs2\fR[\fIi\fR:\fIj\fR], no value is returned.
\fIi\fP and \fIj\fP are optional and, if omitted,
default to 1 and 0, respectively.
.IP "\fIupto(\fIc, s \fR[\fI, i, \fR[\fI, j \fR]]\fI)\fR"
.br
\fIupto\fP
returns the leftmost position in \fIs\fP
of the first instance of a character of
\fIc\fP in
\fIs\fR[\fIi\fR:\fIj\fR].
If no character in
\fIs\fR[\fIi\fR:\fIj\fR] is contained in \fIc\fP,
no value is returned.
\fIi\fP and \fIj\fP are optional and, if omitted,
default to 1 and 0, respectively.
.IP "\fIreverse(\fIs\fI)\fR"
.br
\fIreverse\fP
returns a string consisting of the characters of
\fIs\fP in reversed order.
.NH 3
File Functions and Values
.PP
The initial values of \fIinput\fP, \fIoutput\fP and \fIerrout\fP are the
standard input, standard output, and standard error files, respectively.
.PP
A file must be opened to be written or read.
All files are automatically closed when program execution is terminated.
.IP "\fIclose(\^\fIf\fI\^)\fR"
.br
\fIclose\fP closes file \fIf\fP.
Once a file has been closed,
it must be reopened to be used again.
.IP "\fIopen(\fIs1 \fR[\fI, s2\fR]\fI)\fR"
.br
\fIopen\fP
opens the file with name \fIs1\fP according to the option specified
by \fIs2\fP and returns a file.
The option specified must be one of the following:
.DS B
.ps -1
\fIr\fR	open for reading
\fIw\fR	open for writing
\fIrw\fR	open for reading and writing
\fIa\fR	append\*(emopen for writing at end of file
.ps
.DE
Argument \fIs2\fP is optional and defaults to \fIr\fP.
If file \fIs1\fP cannot be opened with the option specified,
no value is returned.
If the option specified is invalid, an error results.
.IP "\fIread(\fR[\^\fIf\fR\^] [\fI,\fR] [\fIn\fR]\fI)\fR"
.br
\fIread\fP
reads the next \fIn\fP characters from the file \fIf\fP and
returns them as a string.
If fewer than \fIn\fP characters remain on the file \fIf\fP,
\fIread\fP returns
the remaining characters.
Argument \fIf\fP is optional and defaults to the standard input.
If argument \fIn\fP is omitted,
the next line is read from file \fIf\fP.
When the end of file is reached,
no value is returned.
Line terminators are not included in the result if \fIn\fP is omitted.
.IP "\fIseek(\^\fIf, n, i\fI)\fR"
.br
\fIseek\fP
sets the position of the next input or output operation on file
\fIf\fP.
The new position is at the signed distance \fIn\fP bytes from
the beginning, the current position, or the end of the file,
depending on a value of \fI0, 1,\fP or \fI2\fP, respectively, for \fIi\fP.
If the value of \fIi\fP is invalid, an error results.
.IP "\fIwrite(\fR[\^\fIf\fR\^] [\fI,\fR] [ \fIx [, \fIx \fR]...] \fI)\fR"
.br
\fIwrite\fP
writes out arguments \fIx\fP..., to the file \fIf\fP.
If the file is not specified,
the arguments are written to standard output.
If the argument to be written is of type procedure, file, or table,
the type of the argument is written.
Line terminators are not included.
.NH 3
Type Conversion Functions
.PP
.IP "\fIinteger(\fIx\fI)\fR"
.br
\fIinteger\fP returns the value of \fIx\fP converted to
an integer.
If the conversion is not possible (e.g. \fIx\fP is a procedure, file,
or table),
no value is returned.
If \fIx\fP is a real, or a string representation of a real,
any fractional part is truncated.
.IP "\fInumeric(\fIx\fI)\fR"
.br
\fInumeric\fP returns the value of \fIx\fP converted to
a real or an integer.
If the conversion is not possible (e.g. \fIx\fP is procedure, file,
or table),
no value is returned.
.IP "\fIreal(\fIx\fI)\fR"
.br
\fIreal\fP returns the value of \fIx\fP converted to
a real.
If the conversion is not possible (e.g. \fIx\fP is procedure, file,
or table),
no value is returned.
.IP "\fIstring(\fIx\fI)\fR"
.br
\fIstring\fP returns the value of \fIx\fP converted to its
string representation.
If the conversion is not possible (e.g. \fIx\fP is procedure, file,
or table),
no value is returned.
.IP "\fItype(\fIx\fI)\fR"
.br
\fItype\fP returns the type of \fIx\fP as a string.
If \fIx\fP has no value, the null string is returned.
.NH 3
Miscellaneous Functions
.PP
.IP "\fIcompile(\fIs\fI)\fR"
.br
\fIcompile\fP returns a procedure consisting of \fIs\fP compiled as
a procedure.
For example,
.DS
.ft M
f = compile("a = 5")
f()
.DE
assigns the value \fI5\fP to the global variable \fIa\fP.
\fIs\fP is converted to a string, if necessary.
If a syntax error results from the compilation of \fIs\fP,
\fIcompile\fP does not return a value.
.IP "\fIdisplay(\fIn\fI)\fR"
.br
\fIdisplay\fP
prints on the error output
a list of identifier values in the \fIn\fP
levels of procedure invocation starting at the current procedure
invocation.
If \fIn\fP is less than or equal to 0,
only global identifiers are printed.
For each level,
the name of the procedure and string images of its arguments,
along with string images of the locals are printed.
Global identifiers are listed at the end of every display output,
regardless of whether or not the global identifiers are referenced in
the displayed procedures.
.IP "\fIdump(\fIt\fI)\fR"
.br
\fIdump\fP prints on the error output
the contents of table \fIt\fP.
The index value and the table element value are printed
out for each existing element of the table.
.IP "\fIimage(\fIx\fI)\fR"
.br
\fIimage\fP
returns a string representing the value of \fIx\fP.
For strings,
enclosing quotes and escapes are included in the string.
For procedures,
the returned string consists of
the procedure name followed by
either an internal address of
the procedure block or the
built-in procedure number.
For tables and files,
the returned
string consists of
\fItable\fP or \fIfile\fP followed by the internal address
of the table or file.
If \fIx\fP has no value,
the string \fIvoid\fP is returned.
.IP "\fIsize(\fIx\fI)\fR"
.br
If \fIx\fP is a table,
\fIsize\fP returns the number of elements in \fIx\fP.
Otherwise, \fIx\fP is converted to a string and the length of the
string is returned.
If the conversion fails,
no value is returned.
.IP "\fItrace(\fIn\fI)\fR"
.br
\fItrace\fP
traces the next \fIn\fP procedure invocations.
A diagnostic message is written to error output at
each procedure call and return.
On a procedure call,
the trace message includes
the procedure name and string images of the arguments.
On a return,
the message includes the procedure name and,
if a value is returned,
the image of that value.
Each message is indented with a number of periods equal to the level
from which the call or return is made.
For each trace message, \fIn\fP is decremented.
Tracing stops automatically when \fIn\fP becomes 0.
Note that if \fIn\fP is a negative number,
tracing continues indefinitely.
.NH
Statements
.PP
Statements
are executed sequentially in the order in which they appear.
Various control structures provide for other orders of execution.
The control structures are driven by the presence or absence of
a value, not by Boolean values as in conventional languages.
.PP
Statements are usually terminated by
the end of the line on which they appear.
Statements may, however, be spread out
over several lines for readability provided they are broken
at points where it is obvious that they are continued on subsequent
lines.
.NH 2
Expression Statement
.PP
Most statements are simply expressions:
.DL I
expression-statement:
	expression
.DE
Typical expression statements are assignments and procedure calls.
.NH 2
Null Statement
.PP
A lone semicolon is treated as a null statement:
.DL I
null-statement:
	\fB;\fP
.DE
Null statements are sometimes used as the body of loops
in cases where an empty body is needed.
The null statement is the one case in which a statement
may immediately follow another without an
intervening newline.
As such, semicolons may be used to place several statements
on the same line, e.g.
.DS
.ft R
a = 2; f(a, b); b = a \(pl 1
.DE
.NH 2
Compound Statement
.PP
The compound statement permits several statements to be
grouped together as one statement:
.DL I
compound-statement:
	{ statement \fR[\fP statement \fR]\fP... }
.DE
.NH 2
\fBif\fP Statement
.PP
The if statement is the basic conditional statement and permits
a one- or two-way branch on the result of an expression:
.DL I
if-statement:
	\fBif\fP \fR(\fP expression \fR)\fP statement
	\fBif\fP \fR(\fP expression \fR)\fP statement \fBelse\fP statement
.DE
In both forms, the expression is evaluated.
If it yields a value,
the first substatement is executed.
If the \fBelse\fP is specified and the expression does not yield a value,
the second substatement is executed.
.PP
The familiar `dangling else' ambiguity in nested if statements
is resolved by associating an \fBelse\fP with the closest
\fBif\fP that does not have an \fBelse\fP.
For example, in
.DS
.ft R
.ta 3n 6n 9n 12n
if (a >= 0)
	if (a > b)
		max = a
	else
		max = b
.DE
the \fBelse\fP is associated with the second \fBif\fP.
A compound statement may be used to obtain alternate interpretations,
e.g.
.DS
.ft R
.ta 3n 6n 9n 12n
if (a >= 0) {
	if (a > b)
		max = a
	}
else
	max = b
.DE
.PP
Using an if statement as the substatement following an
\fBelse\fP is a general way of writing a multi-way decision and
corresponds to a linear search.
The general form is
.DS
.ft I
.ta 3n 6n 9n 12n
\fBif\fP ( expression )
	statement
\fBelse if\fP ( expression )
	statement
\fBelse if\fP ( expression )
	statement
\fBelse\fP
	statement
.DE
The conditional expressions are executed in the order given
and the first expression that yields a value causes the execution
of the associated statement and termination of the search.
If none of the expressions yield a value,
the statement associated with the last \fBelse\fP
is executed.
Note that this latter statement, which
corresponds to a `default' case, is optional.
.NH 2
\fBwhile\fP Statement
.PP
In the while statement
.DL I
while-statement:
	\fBwhile\fP \fR(\fP expression \fR)\fP statement
.DE
the expression is repeatedly evaluated until it fails to yield a value.
The substatement is executed
after each evaluation that yields a value.
Note that the result of the expression is examined \fIbefore\fP
the substatement is executed.
Thus, if the initial evaluation of the expression does not yield a value,
the substatement is never executed.
.NH 2
\fBfor\fP Statement
.PP
There are two forms of the for statement:
.DL I
.ps -2
for-statement:
	\fBfor\fP \fR(\fP \fR[\fP expression1 \fR]\fP \fR;\fP \c
\fR[\fP expression2 \fR]\fP \fR;\fP \c
\fR[\fP expression3 \fR]\fP \fR)\fP
		statement
	\fBfor\fP \fR(\fP expression1 \fBin\fP expression2 \fR)\fP
		statement
.ps
.DE
The first form
is equivalent (in the absence of next statements) to
.DS
.ft I
.ta 3n 6n 9n 12n
expression1
\fBwhile\fP \fR(\fP expression2 \fR)\fP {
	statement
	expression3
	}
.DE
In typical usage, \fIexpression1\fP and \fIexpression3\fP are
assignments or procedure calls, and \fIexpression2\fP is a conditional
expression.
For example,
.DS
.ft R
.ta 3n 6n 9n 12n
sum = 0
for (i = 1; i <= 10; i = i \(pl 1)
	sum = sum \(pl a[i]
.DE
computes the sum of the elements of an array.
The expressions in the for statement
can, of course, be arbitrary expressions.
For example,
.DS B
.ft M
.ps -1
.ta 3n 6n 9n 12n
for (c = read(1); c == "\0" \^\(br c == "\et"; c = read(1))
	;
.ps
.DE
reads the standard input until the first non-blank character,
which is assigned to \fMc\fP.
Note the use of the null statement as the loop body.
.PP
All of the expressions in the for statement are optional.
If they are omitted, the meaning of the statement is identical
to the corresponding expansion in terms of the while
statement.
Note that omitting all three expression yields
.DS
.ft I
.ta 3n 6n 9n 12n
\fBfor\fP \fR(;;)\fP
	statement
.DE
which is a non-terminating loop.
In this case, the loop can be terminated by other means, e.g. via a
break or return statement.
.PP
The second form of the for statement is used to sequence through tables.
\fIexpression1\fP must be a variable, and
\fIexpression2\fP must be a table.
\fIexpression1\fP is repeatedly
assigned the index value of a table element until all elements
have been accessed.
For example,
.DS
.ft R
.ta 3n 6n 9n 12n
for (i in t)
	write(i, t\^[i])
.DE
writes the index and the value for each element of
table \fMt\fP.
If additional entries are added to the table
within the body of the for statement,
it is undefined whether or not they are encountered while
sequencing through the remainder of the table.
.NH 2
\fBbreak\fP and \fBnext\fP Statements
.PP
The following statements are used to alter the flow of control
within loops:
.DL I
break-statement:
	\fBbreak\fP

next-statement:
	\fBnext\fP
.DE
The break statement causes immediate termination
of the innermost loop (e.g. \fBwhile\fP, \fBrepeat\fP, or \fBfor\fP)
in which it appears.
Execution continues with the statement following the loop.
Note that only the innermost loop is terminated, even
if \fBbreak\fP appears in a nested for, repeat, or while
statement.
.PP
The next statement causes immediate transfer
to the `next iteration' point of the innermost
loop in which it appears.
For a while statement, this point corresponds
to the beginning of the conditional expression, i.e.
to the `top' of the loop.
For the first form of the for statement, control transfers
to the beginning of its \fIexpression3\fP.
For the second form, the index of the next table element is
assigned to \fIexpression1\fP and
control is transferred
to the beginning of the \fIstatement\fP.
.NH 2
\fBreturn\fP Statement
.PP
The return statement is used to
transfer control from a procedure to its caller:
.DL I
return-statement:
	\fBreturn\fP
	\fBreturn\fP \fR(\fP expression \fR)\fP
.DE
If an expression is given, it is evaluated and the result is transmitted
to the caller of the procedure as the result of the procedure call.
In the case of a bare \fBreturn\fP, no value is returned.
An implicit return statement is supplied at the end of
each procedure so that flowing off the end of a procedure
causes a return (with no value).
.NH
Programming Examples
.PP
The following examples illustrate the use of \*S.
Most of them are taken from similar examples in Ratfor and C.
.NH 2
Word Counting
.PP
The following program counts the number
of lines, words, and characters in its input.
It is a simple version of the \fBwc\fP utility
on
.UX
and is described in
both Refs. {.swtools.} and {.clanguage.}.
.PS
procedure wc(file)
	local nl, nc, nw, s, i, f

	f = open(file)
	nc = nw = 0
	for (nl = 0; s = read(f); nl = nl + 1) {
		s = s || " "
		for (i = upto(ascii[34:0], s, 1); i = many("\0\et", s, i);)
			nw = nw + 1
		nc = nc + size(s)
		}
	write (nl, " ", nw, " ", nc, "\en")
end
"wc.S:\et"
wc("wc.S")
"wf.S:\et"
wc("wf.S")
.PE
The statements following the procedure cause \fIwc\fP
to be called with the arguments \fR"wc.S"\fP and \fR"wf.S"\fP.
The output consists of the file names followed by the output
from \fIwc\fP, e.g.
.PS
.ta 8n
wc.S:\*t17  73  357
wf.S:\*t14  53  336
.PE
.NH 2
8 Queens
.PP
The object of the 8-queens problem
(cf. [.wirth data structures.], Sec. 3.5)
is to determine all of the ways
8 queens can be placed on a chess board so that
no queen can take any of the others.
The following solution prints
all 92 solutions (although only 12 are unique).
.PS
procedure queens(c)
	local r, i

	for (r = 1; r <= 8; r = r + 1)
		if (rows[r] == up[r-c+8] == down[r+c-1] == 1) {
			rows[r] = up[r-c+8] = down[r+c-1] = 0
			x[c] = r
			if (c == 8) {
				for (i in x)
					write(x[i])
				write("\en")
				}
			else
				queens(c + 1)
			rows[r] = up[r-c+8] = down[r+c-1] = 1
			}
end
for (i = 1; i <= 15; i = i + 1)
	up[i] = down[i] = 1
for (i = 1; i <= 8; i = i + 1)
	rows[i] = 1
queens(1)
.PE
.NH 2
Word Frequencies
.PP
The following program computes the frequency of occurrence
of the words in its input,
treating upper- and lower-case letters as equivalent.
It uses a table to store the words and their associated counts.
.PS
procedure wf(file)
	local t, line, i, j, f

	f = open(file, "r")
	while (line = map(read(f), ucase, lcase))
		for (i = 1; i = upto(lcase, line, i); i = j) {
			j = many(lcase, line, i)
			t\^[line[i:j]] = t\^[line[i:j]] + 1
			}
	for (i in t)
		write(t\^[i], "\et", i, "\en")
	close(f)
end
wf("wf.S")
.PE
The first part of the output is
.PS
.ta 8n
1	open
1	end
1	ucase
1	many
5	wf
1	close
1	procedure
1	map
4	f
 ...
.PE
.NH 2
Line Editing
.PP
The following program is a simple line editor.
The text to be edited is assumed to be in a file \fIed.in\fP and
the edit commands and correction text are assumed to be in
\fIed.script\fP.
There are four edit commands:
.DS B
.ta 4n
\fBi\fR	insert text following specified line
\fBd\fR	delete specified lines
\fBp\fR	print specified lines
\fBw\fR	write edited text to specified file
.DE
.PP
Line specifications precede the command character.
In the case of the \fId\fP and \fIp\fP commands,
the specification can be either a single line or a range of lines,
with a comma used to separate the low and high bounds.
For the \fIi\fP command,
the lines in the script immediately following the command up to
a line consisting of a single period are inserted.
For the \fIw\fP command,
the name of the file to which the text is to be written follows the
command character in the script.
For brevity, error checking has been omitted;
for instance, references to non-existent lines are permitted.
.PS
procedure insert(pos)
	local line, tbuf, i

	for (i = pos + 1; i <= size(buf); i = i + 1)
		tbuf[i] = buf[i];
	while (line = read(script))
		if (line ~= ".")
			buf[pos = pos + 1] = line
		else
			break
	for (i in tbuf)
		buf[pos = pos + 1] = tbuf[i]
end

procedure delete(pos1, pos2)
	local n, i;

	n = pos2 - pos1 + 1
	for (i = pos1; i <= size(buf) - n; i = i + 1)
		buf[i] = buf[i + n]
	for (; i <= size(buf); i = i + 1)
		buf[i] = ""
end

procedure print(pos1, pos2)
	for ( ; pos1 <= pos2; pos1 = pos1 + 1)
		write(buf[pos1], "\en")
end

procedure fwrite(f)
	local out, i

	outp = open(f, "w")
	for (i in buf)
		if (buf[i] ~= "")
			write(outp, buf[i], "\en")
	close(outp)
end

inp = open("ed.in")
for (i = 1; line = read(inp); i = i + 1)
	buf[i] = line
close(inp)
script = open("ed.script")
digits = "0123456789"
while (line = read(script)) {
	low = line[1:many(digits, line)]
	if (i = many(",", line))
		high = line[i:many(digits, line, i)]
	else
		high = low
	if (find("i", line))
		insert(low)
	else if (find("d", line))
		delete(low, high)
	else if (find("p", line))
		print(low, high)
	else if (i = match("w", line))
		fwrite(line[upto(ascii[34:0], line, i):0])
	}
.PE
.if t .SS 9 10
.br
.[]
.bp
.if t .SS 10 11
.SH
Appendix A.  Program Error Messages
.PP
Program errors result in an error number and message
being printed on the standard error output.
If an invalid type or form error occurs,
the error number is greater than 100 and
the offending value is also printed.
Error messages that may occur during program execution are listed below.
.DS B
.ta 6n
\0\01	value stack overflow

\010	division by zero
\011	remaindering by zero
\012	second and third arguments to map of unequal length

101	numeric expected
102	real expected
103	string expected
104	file expected
105	integer expected
106	procedure expected
107	variable expected
108	invalid type to comparison operation
109	invalid file mode
110	invalid third argument to seek
.DE
